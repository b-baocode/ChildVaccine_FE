import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { FaArrowLeft } from "react-icons/fa";
import { useAuth } from "../context/AuthContext";
import childService from "../service/childService";
import appointmentService from "../service/appointmentService";
import reactionService from "../service/reactionService";
import sessionService from "../service/sessionService";
import "../styles/VaccinationReactionForm.css";

const VaccinationReactionForm = () => {
  const navigate = useNavigate();
  const [selectedChild, setSelectedChild] = useState("");
  const [selectedAppointment, setSelectedAppointment] = useState("");
  const [description, setDescription] = useState("");
  const [severity, setSeverity] = useState("");
  const [children, setChildren] = useState([]);
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [submittedReaction, setSubmittedReaction] = useState(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Fetch children when component mounts
  useEffect(() => {
    const fetchChildren = async () => {
      try {
        const sessionData = await sessionService.checkSession();
        if (!sessionData || !sessionData.body.cusId) {
          throw new Error("No valid session found");
        }

        const childrenData = await childService.getCustomerChildren(
          sessionData.body.cusId
        );
        setChildren(childrenData);
      } catch (err) {
        console.error("Error fetching children:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr·∫ª");
      } finally {
        setLoading(false);
      }
    };

    fetchChildren();
  }, []);

  useEffect(() => {
    let errorTimer;

    if (error) {
      errorTimer = setTimeout(() => {
        setError(null);
      }, 2000);
    }

    // Cleanup function ƒë·ªÉ tr√°nh memory leak
    return () => {
      if (errorTimer) clearTimeout(errorTimer);
    };
  }, [error]);

  // Fetch appointments when a child is selected
  useEffect(() => {
    const fetchAppointments = async () => {
      if (!selectedChild) return;

      try {
        setLoading(true);
        // Thay ƒë·ªïi h√†m ƒë·ªÉ l·∫•y cu·ªôc h·∫πn g·∫ßn nh·∫•t
        const latestAppointment =
          await appointmentService.getLatedAppointmentsByChildId(selectedChild);

        // N·∫øu c√≥ cu·ªôc h·∫πn, t·ª± ƒë·ªông ch·ªçn n√≥
        if (latestAppointment) {
          setAppointments([latestAppointment]); // Ch·ªâ l∆∞u 1 appointment trong m·∫£ng
          setSelectedAppointment(latestAppointment.appId); // T·ª± ƒë·ªông ch·ªçn
        } else {
          setAppointments([]);
          setSelectedAppointment("");
        }
      } catch (err) {
        console.error("Error fetching latest appointment:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin bu·ªïi ti√™m g·∫ßn nh·∫•t");
        setAppointments([]);
      } finally {
        setLoading(false);
      }
    };

    fetchAppointments();
  }, [selectedChild]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError("");

    try {
      // Validation
      if (
        !selectedChild ||
        !selectedAppointment ||
        !description.trim() ||
        !severity
      ) {
        setError("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin");
        setIsSubmitting(false);
        return;
      }

      // Format the data to match exactly what the API expects
      const reactionData = {
        childId: selectedChild,
        appointmentId: selectedAppointment,
        symptoms: description.trim(),
        severity: severity,
        reactionDate: new Date().toISOString(),
      };

      console.log("üìù Submitting reaction data:", reactionData);

      const result = await reactionService.createReaction(reactionData);

      console.log("‚úÖ Reaction submitted successfully:", result);

      // Reset form
      setSelectedChild("");
      setSelectedAppointment("");
      setDescription("");
      setSeverity("");
      setSubmittedReaction(result);
      setShowSuccessMessage(true);

      setTimeout(() => {
        setShowSuccessMessage(false);
      }, 5000);
    } catch (err) {
      console.error("‚ùå Error details:", {
        message: err.message,
        error: err,
      });
      setError("Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (loading) {
    return <div className="loading">ƒêang t·∫£i...</div>;
  }

  return (
    <div className="form-container">
      <button className="back-btn" onClick={() => navigate("/")}>
        <FaArrowLeft /> Quay l·∫°i trang ch·ªß
      </button>
      <h1>B√°o C√°o Ph·∫£n ·ª®ng Sau Ti√™m</h1>

      {error && <div className="error-message">{error}</div>}
      {showSuccessMessage && (
        <div className="success-message">
          B√°o c√°o ph·∫£n ·ª©ng ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!
        </div>
      )}

      {showSuccessMessage && submittedReaction && (
        <div className="success-message">
          <h3>B√°o c√°o ph·∫£n ·ª©ng ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!</h3>
          <div className="success-details">
            <p>
              <strong>M√£ b√°o c√°o:</strong> {submittedReaction.id}
            </p>
            <p>
              <strong>Tr·∫ª:</strong> {submittedReaction.child.fullName}
            </p>
            <p>
              <strong>Ng√†y ti√™m:</strong>{" "}
              {new Date(
                submittedReaction.appointment.appointmentDate
              ).toLocaleDateString()}
            </p>
            <p>
              <strong>
                {submittedReaction.appointment.packageId
                  ? "G√≥i vaccine:"
                  : "Vaccine:"}
              </strong>{" "}
              {submittedReaction.appointment.packageId
                ? submittedReaction.appointment.packageId.name
                : submittedReaction.appointment.vaccineId
                ? submittedReaction.appointment.vaccineId.name
                : "Kh√¥ng c√≥ th√¥ng tin"}
            </p>
            <p>
              <strong>Tri·ªáu ch·ª©ng:</strong> {submittedReaction.symptoms}
            </p>
            <p>
              <strong>M·ª©c ƒë·ªô:</strong>{" "}
              {submittedReaction.severity === "MILD"
                ? "Nh·∫π"
                : submittedReaction.severity === "SEVERE"
                ? "V·ª´a"
                : submittedReaction.severity === "EMERGENCY"
                ? "N·∫∑ng"
                : submittedReaction.severity}
            </p>
          </div>
        </div>
      )}
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label>Ch·ªçn H·ªì S∆° Tr·∫ª:</label>
          <select
            value={selectedChild}
            onChange={(e) => setSelectedChild(e.target.value)}
            required
          >
            <option value="">-- Ch·ªçn tr·∫ª --</option>
            {children.map((child) => (
              <option key={child.childId} value={child.childId}>
                {child.fullName} - {child.childId}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label>Bu·ªïi Ti√™m G·∫ßn Nh·∫•t:</label>
          {appointments.length > 0 ? (
            <div className="appointment-info">
              <p>
                <strong>Ng√†y ti√™m:</strong>{" "}
                {new Date(appointments[0].appointmentDate).toLocaleDateString()}
              </p>
              <p>
                <strong>M√£ cu·ªôc h·∫πn:</strong> {appointments[0].appId}
              </p>
              <p>
                <strong>Vaccine/G√≥i:</strong> {appointments[0].serviceName}
              </p>
              <input
                type="hidden"
                name="selectedAppointment"
                value={selectedAppointment}
              />
            </div>
          ) : (
            <div className="no-appointment">
              Kh√¥ng t√¨m th·∫•y bu·ªïi ti√™m g·∫ßn ƒë√¢y n√†o cho tr·∫ª n√†y. Vui l√≤ng ch·ªçn
              tr·∫ª kh√°c ho·∫∑c li√™n h·ªá trung t√¢m ti√™m ch·ªßng.
            </div>
          )}
        </div>

        <div className="form-group">
          <label>M√¥ T·∫£ Ph·∫£n ·ª®ng:</label>
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            required
            placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ ph·∫£n ·ª©ng sau ti√™m..."
          />
        </div>

        <div className="form-group">
          <label>M·ª©c ƒê·ªô:</label>
          <div className="severity-buttons">
            <button
              type="button"
              className={`severity-btn mild ${
                severity === "MILD" ? "active" : ""
              }`}
              onClick={() => setSeverity("MILD")}
            >
              Nh·∫π
            </button>
            <button
              type="button"
              className={`severity-btn severe ${
                severity === "SEVERE" ? "active" : ""
              }`}
              onClick={() => setSeverity("SEVERE")}
            >
              V·ª´a
            </button>
            <button
              type="button"
              className={`severity-btn emergency ${
                severity === "EMERGENCY" ? "active" : ""
              }`}
              onClick={() => setSeverity("EMERGENCY")}
            >
              N·∫∑ng
            </button>
          </div>
        </div>

        <button type="submit" className="submit-btn" disabled={isSubmitting}>
          {isSubmitting ? "ƒêang g·ª≠i..." : "G·ª≠i B√°o C√°o"}
        </button>
      </form>
    </div>
  );
};

export default VaccinationReactionForm;
