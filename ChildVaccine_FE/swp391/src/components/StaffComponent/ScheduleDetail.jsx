import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  FaArrowLeft,
  FaEye,
  FaCalendarCheck,
  FaTimes,
  FaCheck,
  FaMoneyBillWave,
  FaNotesMedical,
  FaSave,
  FaStethoscope,
  FaCalendarAlt,
  FaEdit,
  FaCheckCircle,
} from "react-icons/fa";
import appointmentService from "../../service/appointmentService";
import scheduleService from "../../service/scheduleService";
import recordService from "../../service/recordService";
import paymentService from "../../service/paymentService";
import sessionService from "../../service/sessionService";
import style from "../../styles/StaffStyles/ScheduleDetail.css";

const ScheduleDetail = () => {
  const { scheduleId } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [appointments, setAppointments] = useState([]);
  const [schedule, setSchedule] = useState(null);
  const [isViewOnly, setIsViewOnly] = useState(false);
  const [recordExists, setRecordExists] = useState(false);
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);
  const [records, setRecords] = useState([]);
  const [tempRecordData, setTempRecordData] = useState({});
  const [isEditing, setIsEditing] = useState(false);
  // Th√™m state m·ªõi
  const [payFull, setPayFull] = useState(false);

  // C√°c state m·ªõi
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [showWarningModal, setShowWarningModal] = useState(false);
  const [warningMessage, setWarningMessage] = useState("");
  const [pendingStatusChange, setPendingStatusChange] = useState(null);
  const [showRecordModal, setShowRecordModal] = useState(false);
  const [processingPayment, setProcessingPayment] = useState(false);
  const [processingPaymentId, setProcessingPaymentId] = useState(null);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [recordData, setRecordData] = useState({ symptoms: "", notes: "" });

  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [manualPayment, setManualPayment] = useState(false);
  // C√°c state cho ch·ª©c nƒÉng d·ªùi l·ªãch
  const [showRescheduleModal, setShowRescheduleModal] = useState(false);
  const [appointmentToReschedule, setAppointmentToReschedule] = useState(null);
  const [newAppointmentDate, setNewAppointmentDate] = useState("");
  const [newAppointmentTime, setNewAppointmentTime] = useState("");
  const [reschedulingAppointment, setReschedulingAppointment] = useState(false);

  const [currentStaffId, setCurrentStaffId] = useState("S001"); // Default value

  useEffect(() => {
    const getCurrentUser = async () => {
      try {
        // L·∫•y d·ªØ li·ªáu session s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c async
        const sessionData = await sessionService.checkStaffSession();
        console.log("üîë Session Data:", sessionData);

        if (!sessionData) {
          console.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin phi√™n");
          return;
        }

        // Truy c·∫≠p staffId t·ª´ c·∫•u tr√∫c m·ªõi (n·∫±m trong body.user.id)
        if (
          sessionData.body &&
          sessionData.body.user &&
          sessionData.body.user.id
        ) {
          const staffId = sessionData.body.user.id;
          setCurrentStaffId(staffId);
          console.log("Staff ID from session:", staffId);
        } else {
          console.warn("Kh√¥ng t√¨m th·∫•y ID nh√¢n vi√™n trong phi√™n l√†m vi·ªác");
        }
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin phi√™n:", error);
      }
    };

    getCurrentUser();
  }, []);

  // Trong useEffect khi t·∫£i d·ªØ li·ªáu, th√™m ph·∫ßn t·∫£i records
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);

        // First get the schedule details
        const scheduleResponse = await scheduleService.getAllSchedules();
        if (scheduleResponse.ok) {
          const scheduleData = scheduleResponse.schedules.find(
            (s) => s.scheduleId === scheduleId
          );
          if (scheduleData) {
            setSchedule(scheduleData);

            // Ch·ªâ g·ªçi API ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu schedule ƒëang ACTIVE
            if (scheduleData.status === "ACTIVE") {
              console.log(`Ki·ªÉm tra tr·∫°ng th√°i cho schedule ${scheduleId}`);
              const updateResult =
                await scheduleService.updateStatusIfCompleted(scheduleId);

              console.log("K·∫øt qu·∫£ c·∫≠p nh·∫≠t tr·∫°ng th√°i:", updateResult);

              if (updateResult.ok && updateResult.updated) {
                console.log(
                  "Schedule ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh COMPLETED"
                );
                // N·∫øu schedule ƒë∆∞·ª£c c·∫≠p nh·∫≠t, l·∫•y l·∫°i th√¥ng tin m·ªõi
                const refreshResponse = await scheduleService.getAllSchedules();
                if (refreshResponse.ok) {
                  const refreshedData = refreshResponse.schedules.find(
                    (s) => s.scheduleId === scheduleId
                  );
                  if (refreshedData) {
                    setSchedule(refreshedData);
                  }
                }
              }
            }
          } else {
            setError(`Kh√¥ng t√¨m th·∫•y l·ªãch ti√™m v·ªõi m√£ ${scheduleId}`);
          }
        }

        // Then get all appointments for this schedule
        const appointmentsResponse =
          await appointmentService.getAppointmentsByScheduleId(scheduleId);
        if (appointmentsResponse.ok) {
          const appointmentsData = appointmentsResponse.appointments || [];
          setAppointments(appointmentsData);
        } else {
          setError(
            appointmentsResponse.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch l·ªãch h·∫πn"
          );
        }
      } catch (err) {
        setError("ƒê√£ x·∫£y ra l·ªói khi t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.");
        console.error("Error fetching schedule details:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [scheduleId]);

  useEffect(() => {
    const fetchRecords = async () => {
      try {
        const recordsData = await recordService.getAllRecords();
        setRecords(recordsData);
      } catch (error) {
        console.error("Error fetching records:", error);
      }
    };

    fetchRecords();
  }, [refreshTrigger]);

  const hasRecord = (appointmentId) => {
    // Ki·ªÉm tra xem appointment n√†y c√≥ record ch∆∞a
    const existingRecord = records.some(
      (record) => record.appointmentId === appointmentId
    );

    // N·∫øu ƒëang xem record c·ªßa appointment n√†y (isViewOnly=true v√† selectedAppointmentId=appointmentId)
    // th√¨ nghƒ©a l√† appointment n√†y c√≥ record
    const isCurrentlyViewingThisRecord =
      isViewOnly && selectedAppointmentId === appointmentId;

    return existingRecord || isCurrentlyViewingThisRecord;
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("vi-VN");
  };

  const formatTime = (timeString) => {
    if (!timeString) return "";

    // Handle common formats (HH:MM:SS)
    if (timeString.includes(":")) {
      const timeParts = timeString.split(":");
      return `${timeParts[0]}:${timeParts[1]}`;
    }
    return timeString;
  };

  const getStatusBadgeClass = (status) => {
    switch (status) {
      case "COMPLETED":
        return "status-badge completed";
      case "CONFIRMED":
        return "status-badge confirmed";
      case "PENDING":
        return "status-badge pending";
      case "CANCELLED":
        return "status-badge cancelled";
      default:
        return "status-badge";
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case "COMPLETED":
        return "ƒê√£ ho√†n th√†nh";
      case "CONFIRMED":
        return "ƒê√£ x√°c nh·∫≠n";
      case "PENDING":
        return "Ch·ªù x√°c nh·∫≠n";
      case "CANCELLED":
        return "ƒê√£ h·ªßy";
      default:
        return status;
    }
  };

  // X·ª≠ l√Ω khi nh·∫•p v√†o n√∫t thay ƒë·ªïi tr·∫°ng th√°i
  const handleStatusChangeRequest = (appointmentId, newStatus) => {
    const appointment = appointments.find((app) => app.appId === appointmentId);

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán h·ª£p l·ªá
    if (appointment.status === "COMPLETED" && newStatus === "CANCELLED") {
      setWarningMessage("Kh√¥ng th·ªÉ h·ªßy l·ªãch h·∫πn ƒë√£ ho√†n th√†nh.");
      setShowWarningModal(true);
      return;
    }

    if (appointment.status === "CANCELLED" && newStatus === "COMPLETED") {
      setWarningMessage("Kh√¥ng th·ªÉ ƒë√°nh d·∫•u ho√†n th√†nh l·ªãch h·∫πn ƒë√£ h·ªßy.");
      setShowWarningModal(true);
      return;
    }

    if (newStatus === "COMPLETED" && appointment.paymentStatus !== "PAID") {
      setWarningMessage(
        "L·ªãch h·∫πn ch∆∞a ƒë∆∞·ª£c thanh to√°n. Vui l√≤ng thanh to√°n tr∆∞·ªõc khi ƒë√°nh d·∫•u ho√†n th√†nh."
      );
      setShowWarningModal(true);
      return;
    }

    // N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu h·ª£p l·ªá, hi·ªÉn th·ªã modal x√°c nh·∫≠n
    setPendingStatusChange({ appointmentId, newStatus });
    setShowConfirmModal(true);
  };

  // X·ª≠ l√Ω x√°c nh·∫≠n thay ƒë·ªïi tr·∫°ng th√°i
  const confirmStatusChange = async () => {
    setShowConfirmModal(false);

    if (!pendingStatusChange) return;

    const { appointmentId, newStatus } = pendingStatusChange;

    // V·∫´n gi·ªØ l·∫°i c√°c ki·ªÉm tra ƒëi·ªÅu ki·ªán h·ª£p l·ªá tr∆∞·ªõc khi g·ªçi API
    const currentAppointment = appointments.find(
      (app) => app.appId === appointmentId
    );
    if (!currentAppointment) {
      setWarningMessage("Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn.");
      setShowWarningModal(true);
      setPendingStatusChange(null);
      return;
    }

    const currentStatus = currentAppointment.status;

    // Ki·ªÉm tra logic chuy·ªÉn tr·∫°ng th√°i
    if (currentStatus === "CANCELLED" && newStatus !== "CANCELLED") {
      setWarningMessage(
        "Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i t·ª´ CANCELLED sang tr·∫°ng th√°i kh√°c."
      );
      setShowWarningModal(true);
      setPendingStatusChange(null);
      return;
    } else if (currentStatus === "COMPLETED" && newStatus === "CONFIRMED") {
      setWarningMessage(
        "Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i t·ª´ COMPLETED v·ªÅ CONFIRMED."
      );
      setShowWarningModal(true);
      setPendingStatusChange(null);
      return;
    }

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán thanh to√°n khi chuy·ªÉn sang COMPLETED
    if (
      newStatus === "COMPLETED" &&
      currentAppointment.paymentStatus !== "PAID"
    ) {
      setWarningMessage(
        "L·ªãch h·∫πn ch∆∞a ƒë∆∞·ª£c thanh to√°n. Vui l√≤ng thanh to√°n tr∆∞·ªõc khi ƒë√°nh d·∫•u ho√†n th√†nh."
      );
      setShowWarningModal(true);
      setPendingStatusChange(null);
      return;
    }

    try {
      // G·ªçi API c·∫≠p nh·∫≠t tr·∫°ng th√°i
      await appointmentService.updateAppointmentStatus(
        appointmentId,
        newStatus
      );

      // ƒê∆°n gi·∫£n h√≥a: kh√¥ng ki·ªÉm tra k·∫øt qu·∫£, c·ª© cho l√† th√†nh c√¥ng lu√¥n
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      setShowSuccessMessage(true);
      setTimeout(() => setShowSuccessMessage(false), 3000);

      // C·∫≠p nh·∫≠t UI v·ªõi d·ªØ li·ªáu m·ªõi
      setAppointments(
        appointments.map((app) =>
          app.appId === appointmentId ? { ...app, status: newStatus } : app
        )
      );

      // N·∫øu ƒë√£ chuy·ªÉn sang COMPLETED, ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i schedule n·∫øu c·∫ßn
      if (newStatus === "COMPLETED") {
        try {
          const updateResult = await scheduleService.updateStatusIfCompleted(
            scheduleId
          );
          if (updateResult.ok && updateResult.updated) {
            // N·∫øu schedule c≈©ng ƒë√£ ho√†n th√†nh, c·∫≠p nh·∫≠t state schedule
            setSchedule((prev) => ({ ...prev, status: "COMPLETED" }));
          }
        } catch (error) {
          console.error("Error checking schedule completion:", error);
        }
      }
    } catch (error) {
      console.error("Error updating appointment status:", error);
      setWarningMessage("ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i");
      setShowWarningModal(true);
    } finally {
      setPendingStatusChange(null);
    }
  };

  // X·ª≠ l√Ω thanh to√°n
  const handlePaymentRequest = (appointment) => {
    setSelectedAppointment(appointment);
    setShowPaymentModal(true);
  };

  const handlePayAllRequest = () => {
    // T√¨m appointment ch∆∞a thanh to√°n ƒë·ªÉ l√†m reference
    const unpaidAppointments = appointments.filter(
      (app) => app.paymentStatus !== "PAID" && app.status !== "CANCELLED"
    );

    if (unpaidAppointments.length === 0) {
      setWarningMessage("Kh√¥ng c√≥ l·ªãch h·∫πn n√†o c·∫ßn thanh to√°n.");
      setShowWarningModal(true);
      return;
    }

    // S·ª≠ d·ª•ng appointment ƒë·∫ßu ti√™n ch∆∞a thanh to√°n
    setSelectedAppointment(unpaidAppointments[0]);
    setPayFull(true); // ƒê√°nh d·∫•u l√† thanh to√°n to√†n b·ªô
    setShowPaymentModal(true);
  };

  const processPayment = async () => {
    setShowPaymentModal(false);
    if (!selectedAppointment) return;

    try {
      setProcessingPayment(true);
      setProcessingPaymentId(selectedAppointment.appId);

      if (manualPayment) {
        // THANH TO√ÅN TH·ª¶ C√îNG
        try {
          if (payFull) {
            // Thanh to√°n t·∫•t c·∫£ c√°c appointment trong schedule
            // L·∫•y t·∫•t c·∫£ appointment ch∆∞a thanh to√°n v√† kh√¥ng b·ªã h·ªßy
            const unpaidAppointments = appointments.filter(
              (app) =>
                app.paymentStatus !== "PAID" && app.status !== "CANCELLED"
            );

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ng appointment
            const updatePromises = unpaidAppointments.map((app) =>
              appointmentService.updatePaymentStatus(app.appId)
            );

            await Promise.all(updatePromises);

            // C·∫≠p nh·∫≠t UI: ƒë√°nh d·∫•u t·∫•t c·∫£ appointment l√† ƒë√£ thanh to√°n
            setAppointments(
              appointments.map((app) =>
                app.status !== "CANCELLED"
                  ? { ...app, paymentStatus: "PAID" }
                  : app
              )
            );
          } else {
            // Thanh to√°n m·ªôt appointment c·ª• th·ªÉ
            const result = await appointmentService.updatePaymentStatus(
              selectedAppointment.appId
            );

            if (result.ok) {
              // C·∫≠p nh·∫≠t UI cho appointment ƒë√£ ch·ªçn
              setAppointments(
                appointments.map((app) =>
                  app.appId === selectedAppointment.appId
                    ? { ...app, paymentStatus: "PAID" }
                    : app
                )
              );
            } else {
              throw new Error(
                result.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t thanh to√°n"
              );
            }
          }

          setShowSuccessMessage(true);
          setTimeout(() => setShowSuccessMessage(false), 3000);
        } catch (err) {
          setWarningMessage(
            `Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n: ${err.message}`
          );
          setShowWarningModal(true);
        }
      } else {
        // THANH TO√ÅN QUA VNPAY
        try {
          const paymentUrl = await paymentService.createPayment(
            selectedAppointment.appId,
            scheduleId,
            payFull
          );

          // M·ªü URL thanh to√°n VNPay trong tab m·ªõi
          window.open(paymentUrl, "_blank");
        } catch (err) {
          setWarningMessage(`Kh√¥ng th·ªÉ t·∫°o thanh to√°n VNPay: ${err.message}`);
          setShowWarningModal(true);
        }
      }
    } catch (error) {
      console.error("Error processing payment:", error);
      setWarningMessage("ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω thanh to√°n");
      setShowWarningModal(true);
    } finally {
      setProcessingPayment(false);
      setProcessingPaymentId(null);
      setManualPayment(false);
      setPayFull(false);
      setSelectedAppointment(null);
    }
  };

  // X·ª≠ l√Ω hi·ªÉn th·ªã modal record
  const handleRecordRequest = async (appointment) => {
    try {
      setSelectedAppointment(appointment);

      // Fetch record data for the appointment
      const response = await recordService.getRecordByAppointmentId(
        appointment.appId
      );
      console.log("Fetching record for appointment: ", response);

      if (response.ok) {
        const recordData = response.record;

        // Ki·ªÉm tra xem k·∫øt qu·∫£ l√† m·∫£ng hay ƒë·ªëi t∆∞·ª£ng ƒë∆°n
        if (Array.isArray(recordData) && recordData.length > 0) {
          // N·∫øu l√† m·∫£ng, l·∫•y ph·∫ßn t·ª≠ cu·ªëi c√πng (th∆∞·ªùng l√† record m·ªõi nh·∫•t)
          const latestRecord = recordData[recordData.length - 1];

          // Hi·ªÉn th·ªã d·ªØ li·ªáu v√† ƒë·∫∑t ch·∫ø ƒë·ªô xem
          setRecordData({
            id: latestRecord.id || "",
            symptoms: latestRecord.symptoms || "",
            notes: latestRecord.notes || "",
            appointmentDate:
              latestRecord.appointmentDate ||
              new Date().toISOString().split("T")[0],
            staffId: latestRecord.staff?.id || currentStaffId,
          });
          setIsViewOnly(true); // B·∫≠t ch·∫ø ƒë·ªô ch·ªâ xem
          setShowRecordModal(true);
        } else if (recordData && (recordData.id || recordData.appointment)) {
          // N·∫øu l√† ƒë·ªëi t∆∞·ª£ng ƒë∆°n
          setRecordData({
            id: recordData.id || "",
            symptoms: recordData.symptoms || "",
            notes: recordData.notes || "",
            appointmentDate:
              recordData.appointmentDate ||
              new Date().toISOString().split("T")[0],
            staffId: recordData.staff?.id || currentStaffId,
          });
          setIsViewOnly(true); // B·∫≠t ch·∫ø ƒë·ªô ch·ªâ xem
          setShowRecordModal(true);
        } else {
          // Kh√¥ng c√≥ record, t·∫°o m·ªõi
          setRecordData({
            symptoms: "",
            notes: "",
            appointmentDate: new Date().toISOString().split("T")[0],
            staffId: currentStaffId,
          });
          setIsViewOnly(false); // Cho ph√©p ch·ªânh s·ª≠a
          setShowRecordModal(true);
        }
      } else {
        // API tr·∫£ v·ªÅ l·ªói ho·∫∑c kh√¥ng c√≥ record
        setRecordData({
          symptoms: "",
          notes: "",
          appointmentDate: new Date().toISOString().split("T")[0],
          staffId: currentStaffId,
        });
        setIsViewOnly(false); // Cho ph√©p ch·ªânh s·ª≠a
        setShowRecordModal(true);
      }
    } catch (error) {
      console.error("Error fetching record:", error);
      setWarningMessage("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªì s∆° y t·∫ø");
      setShowWarningModal(true);
    }
  };

  const handleEditRecord = () => {
    setIsViewOnly(false);
    setIsEditing(true);
  };

  // X·ª≠ l√Ω l∆∞u record
  const handleSaveRecord = async () => {
    // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªâ xem, kh√¥ng c·∫ßn x·ª≠ l√Ω g√¨
    if (isViewOnly) {
      setShowRecordModal(false);
      return;
    }

    if (!selectedAppointment || !recordData.symptoms.trim()) {
      setWarningMessage("Vui l√≤ng nh·∫≠p tri·ªáu ch·ª©ng sau ti√™m");
      setShowWarningModal(true);
      return;
    }

    try {
      setIsSaving(true);

      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒëi - d√πng chung c·∫•u tr√∫c cho c·∫£ t·∫°o m·ªõi v√† c·∫≠p nh·∫≠t
      const recordToSave = {
        // N·∫øu c√≥ id (ƒëang c·∫≠p nh·∫≠t record c≈©), gi·ªØ l·∫°i id
        ...(recordData.id && { id: recordData.id }),
        appointmentId: selectedAppointment.appId,
        staffId: recordData.staffId || "S001",
        symptoms: recordData.symptoms,
        notes: recordData.notes,
        appointmentDate:
          recordData.appointmentDate || new Date().toISOString().split("T")[0],
      };

      console.log("Saving record:", recordToSave);

      // Lu√¥n d√πng createRecord cho c·∫£ t·∫°o m·ªõi v√† c·∫≠p nh·∫≠t
      const savedRecord = await recordService.createRecord(recordToSave);

      console.log("K·∫øt qu·∫£ t·ª´ API:", savedRecord);

      if (savedRecord) {
        // C·∫≠p nh·∫≠t state records
        if (recordData.id) {
          // N·∫øu c·∫≠p nh·∫≠t record c≈©
          setRecords((prevRecords) =>
            prevRecords.map((r) => (r.id === recordData.id ? savedRecord : r))
          );
        } else {
          // N·∫øu t·∫°o m·ªõi
          setRecords((prevRecords) => [...prevRecords, savedRecord]);
        }

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        setShowRecordModal(false);
        setShowSuccessMessage(true);
        setTimeout(() => setShowSuccessMessage(false), 3000);
      } else {
        setWarningMessage(
          "L∆∞u record kh√¥ng th√†nh c√¥ng. D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá."
        );
        setShowWarningModal(true);
      }
    } catch (error) {
      console.error("Error saving record:", error);
      setWarningMessage(
        error.message || "Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau."
      );
      setShowWarningModal(true);
    } finally {
      setIsSaving(false);
    }
  };

  // Th√™m h√†m x·ª≠ l√Ω ƒë√≥ng modal record
  const handleCloseRecordModal = () => {
    console.log("ƒê√≥ng modal, gi·ªØ d·ªØ li·ªáu t·∫°m:", tempRecordData);
    // Ch·ªâ ·∫©n modal nh∆∞ng kh√¥ng reset selectedAppointment ho·∫∑c d·ªØ li·ªáu
    setShowRecordModal(false);

    // KH√îNG l√†m ƒëi·ªÅu n√†y:
    // setSelectedAppointment(null);
    // setRecordData({ symptoms: "", notes: "" });
  };

  // H√†m t·∫°o c√°c slot th·ªùi gian t·ª´ 8h ƒë·∫øn 17h
  const generateTimeSlots = () => {
    const slots = [];
    for (let hour = 8; hour <= 17; hour++) {
      slots.push(`${hour.toString().padStart(2, "0")}:00:00`);
      if (hour < 17) {
        slots.push(`${hour.toString().padStart(2, "0")}:30:00`);
      }
    }
    return slots;
  };

  // H√†m m·ªü modal d·ªùi l·ªãch
  const handleOpenRescheduleModal = (appointment) => {
    setAppointmentToReschedule(appointment);
    setNewAppointmentDate(appointment.appointmentDate);
    setNewAppointmentTime("");
    setShowRescheduleModal(true);
  };

  const calculateDateRange = (baseDate) => {
    if (!baseDate) return { min: null, max: null };

    const date = new Date(baseDate);

    // T√≠nh 3 ng√†y tr∆∞·ªõc
    const minDate = new Date(date);
    minDate.setDate(date.getDate() - 3);

    // T√≠nh 3 ng√†y sau
    const maxDate = new Date(date);
    maxDate.setDate(date.getDate() + 3);

    // ƒê·∫£m b·∫£o kh√¥ng ch·ªçn ng√†y qu√° kh·ª©
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    return {
      min:
        minDate < today
          ? today.toISOString().split("T")[0]
          : minDate.toISOString().split("T")[0],
      max: maxDate.toISOString().split("T")[0],
    };
  };

  // H√†m ƒë√≥ng modal d·ªùi l·ªãch
  const handleCloseRescheduleModal = () => {
    setShowRescheduleModal(false);
    setAppointmentToReschedule(null);
    setNewAppointmentDate("");
    setNewAppointmentTime("");
  };

  // H√†m x·ª≠ l√Ω d·ªùi l·ªãch
  const handleRescheduleAppointment = async () => {
    if (
      !appointmentToReschedule ||
      !newAppointmentDate ||
      !newAppointmentTime
    ) {
      setWarningMessage("Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù m·ªõi.");
      setShowWarningModal(true);
      return;
    }

    try {
      setReschedulingAppointment(true);

      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t l·ªãch h·∫πn
      const result = await appointmentService.rescheduleAppointment(
        appointmentToReschedule.appId,
        newAppointmentDate,
        newAppointmentTime
      );

      if (result.ok) {
        // C·∫≠p nh·∫≠t state appointments
        const updatedAppointments = appointments.map((app) =>
          app.appId === appointmentToReschedule.appId
            ? {
                ...app,
                appointmentDate: newAppointmentDate,
                appointmentTime: newAppointmentTime,
              }
            : app
        );
        setAppointments(updatedAppointments);

        // ƒê√≥ng modal v√† hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        handleCloseRescheduleModal();
        setShowSuccessMessage(true);
        setTimeout(() => setShowSuccessMessage(false), 3000);
      } else {
        setWarningMessage(
          result.message || "Kh√¥ng th·ªÉ d·ªùi l·ªãch h·∫πn. Vui l√≤ng th·ª≠ l·∫°i sau."
        );
        setShowWarningModal(true);
      }
    } catch (error) {
      console.error("Error rescheduling appointment:", error);
      setWarningMessage("ƒê√£ x·∫£y ra l·ªói khi d·ªùi l·ªãch h·∫πn");
      setShowWarningModal(true);
    } finally {
      setReschedulingAppointment(false);
    }
  };

  const calculatePendingTotal = () => {
    return appointments
      .filter(
        (app) => app.paymentStatus === "PENDING" && app.status !== "CANCELLED"
      )
      .reduce((total, app) => total + (parseFloat(app.price) || 0), 0);
  };

  return (
    <div className="schedule-detail">
      <div className="header-section">
        <button
          className="back-btn"
          onClick={() => navigate("/staff/schedule-info")}
        >
          <FaArrowLeft /> Quay l·∫°i
        </button>
        <h1>Chi ti·∫øt l·ªãch ti√™m #{scheduleId}</h1>
      </div>

      {showSuccessMessage && (
        <div className="success-message">
          Thao t√°c ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán th√†nh c√¥ng!
        </div>
      )}

      {loading ? (
        <div className="loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>
      ) : error ? (
        <div className="error">{error}</div>
      ) : (
        <>
          {schedule && (
            <div className="schedule-summary">
              <h2>Th√¥ng tin l·ªãch ti√™m</h2>
              <div className="summary-grid">
                <div className="summary-item">
                  <span className="label">M√£ l·ªãch:</span>
                  <span className="value">{schedule.scheduleId}</span>
                </div>
                <div className="summary-item">
                  <span className="label">Kh√°ch h√†ng:</span>
                  <span className="value">
                    {schedule.cusName} ({schedule.cusId})
                  </span>
                </div>
                <div className="summary-item">
                  <span className="label">Tr·∫ª em:</span>
                  <span className="value">{schedule.childName}</span>
                </div>
                <div className="summary-item">
                  <span className="label">D·ªãch v·ª•:</span>
                  <span className="value">
                    {schedule.vaccineName || schedule.packageName}
                    <span className="vaccine-type">
                      {schedule.vaccineName ? " (V·∫Øc xin)" : " (G√≥i)"}
                    </span>
                  </span>
                </div>
                <div className="summary-item">
                  <span className="label">Ng√†y b·∫Øt ƒë·∫ßu:</span>
                  <span className="value">
                    {formatDate(schedule.startDate)}
                  </span>
                </div>
                <div className="summary-item">
                  <span className="label">T·ªïng s·ªë m≈©i:</span>
                  <span className="value">{schedule.totalShot}</span>
                </div>
                <div className="summary-item">
                  <span className="label">T·ªïng chi ph√≠:</span>
                  <span className="value">
                    {calculatePendingTotal().toLocaleString()} VNƒê
                  </span>
                </div>
                <div className="summary-item">
                  <span className="label">Tr·∫°ng th√°i:</span>
                  <span
                    className={`status-badge ${schedule.status.toLowerCase()}`}
                  >
                    {schedule.status === "ACTIVE"
                      ? "ƒêang ho·∫°t ƒë·ªông"
                      : schedule.status === "COMPLETED"
                      ? "ƒê√£ ho√†n th√†nh"
                      : "ƒê√£ h·ªßy"}
                  </span>
                </div>
                <div className="summary-item full-width actions">
                  <button
                    className="pay-all-btn"
                    onClick={handlePayAllRequest}
                    disabled={!schedule || schedule.status === "CANCELLED"}
                  >
                    <FaMoneyBillWave /> Thanh to√°n t·∫•t c·∫£
                  </button>
                </div>
              </div>
            </div>
          )}

          <div className="appointments-section">
            <h2>Danh s√°ch l·ªãch h·∫πn</h2>
            {appointments.length === 0 ? (
              <div className="no-data">Kh√¥ng c√≥ l·ªãch h·∫πn n√†o</div>
            ) : (
              <table className="appointments-table">
                <thead>
                  <tr>
                    <th>M√£ h·∫πn</th>
                    <th>M≈©i s·ªë</th>
                    <th>V·∫Øc xin</th>
                    <th>Ng√†y h·∫πn</th>
                    <th>Gi·ªù h·∫πn</th>
                    <th>Gi√°</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>Thanh to√°n</th>
                    <th>Thao t√°c</th>
                  </tr>
                </thead>
                <tbody>
                  {appointments.map((appointment) => (
                    <tr
                      key={appointment.appId}
                      className={
                        processingPaymentId === appointment.appId
                          ? "processing-payment"
                          : ""
                      }
                    >
                      <td>{appointment.appId}</td>
                      <td className="shot-number">
                        M≈©i {appointment.shotNumber}
                      </td>
                      <td>{appointment.serviceName || "-"}</td>
                      <td>{formatDate(appointment.appointmentDate)}</td>
                      <td>{formatTime(appointment.appointmentTime)}</td>
                      <td>{appointment.price}</td>
                      <td>
                        <span
                          className={getStatusBadgeClass(appointment.status)}
                        >
                          {getStatusText(appointment.status)}
                        </span>
                      </td>
                      <td>
                        <span
                          className={`payment-status ${appointment.paymentStatus.toLowerCase()}`}
                        >
                          {appointment.paymentStatus === "PAID"
                            ? "ƒê√£ thanh to√°n"
                            : "Ch∆∞a thanh to√°n"}
                        </span>
                      </td>
                      <td className="action-buttons">
                        {/* N√∫t thanh to√°n */}
                        {appointment.status !== "CANCELLED" &&
                          appointment.paymentStatus !== "PAID" && (
                            <button
                              className="payment-btn"
                              onClick={() => handlePaymentRequest(appointment)}
                              disabled={processingPayment}
                              title="Thanh to√°n"
                            >
                              <FaMoneyBillWave />
                            </button>
                          )}

                        {/* N√∫t t·∫°o h·ªì s∆° y t·∫ø */}
                        {appointment.status === "COMPLETED" && (
                          <button
                            className="record-btn"
                            onClick={() => handleRecordRequest(appointment)}
                            title={
                              hasRecord(appointment.appId)
                                ? "Xem h·ªì s∆° y t·∫ø"
                                : "T·∫°o h·ªì s∆° y t·∫ø"
                            }
                          >
                            {hasRecord(appointment.appId) ? (
                              <FaEye />
                            ) : (
                              <FaNotesMedical />
                            )}
                          </button>
                        )}

                        {appointment.status === "CONFIRMED" && (
                          <button
                            className="reschedule-btn"
                            onClick={() =>
                              handleOpenRescheduleModal(appointment)
                            }
                            title="D·ªùi l·ªãch h·∫πn"
                          >
                            <FaCalendarAlt />
                          </button>
                        )}

                        {/* N√∫t thay ƒë·ªïi tr·∫°ng th√°i */}
                        {appointment.status === "CONFIRMED" &&
                          appointment.paymentStatus === "PAID" && (
                            <button
                              className="complete-btn"
                              onClick={() =>
                                handleStatusChangeRequest(
                                  appointment.appId,
                                  "COMPLETED"
                                )
                              }
                              title="X√°c nh·∫≠n ho√†n th√†nh"
                            >
                              <FaCheckCircle />
                            </button>
                          )}
                        {appointment.status !== "COMPLETED" &&
                          appointment.status !== "CANCELLED" && (
                            <>
                              <button
                                className="cancel-btn"
                                onClick={() =>
                                  handleStatusChangeRequest(
                                    appointment.appId,
                                    "CANCELLED"
                                  )
                                }
                                title="H·ªßy l·ªãch h·∫πn"
                              >
                                <FaTimes />
                              </button>
                            </>
                          )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            )}
          </div>
        </>
      )}

      {/* Modal x√°c nh·∫≠n thay ƒë·ªïi tr·∫°ng th√°i */}
      {showConfirmModal && pendingStatusChange && (
        <div className="modal-overlay">
          <div className="confirm-modal">
            <h3>X√°c nh·∫≠n thay ƒë·ªïi</h3>
            <p>
              {pendingStatusChange.newStatus === "COMPLETED"
                ? "B·∫°n c√≥ ch·∫Øc mu·ªën ƒë√°nh d·∫•u l·ªãch h·∫πn n√†y l√† ƒë√£ ho√†n th√†nh?"
                : "B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy l·ªãch h·∫πn n√†y?"}
            </p>
            <div className="modal-actions">
              <button className="confirm-btn" onClick={confirmStatusChange}>
                X√°c nh·∫≠n
              </button>
              <button
                className="cancel-btn"
                onClick={() => setShowConfirmModal(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal c·∫£nh b√°o */}
      {showWarningModal && (
        <div className="modal-overlay">
          <div className="warning-modal">
            <h3>C·∫£nh b√°o</h3>
            <p>{warningMessage}</p>
            <div className="modal-actions">
              <button
                className="cancel-btn"
                onClick={() => setShowWarningModal(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal thanh to√°n */}
      {showPaymentModal && selectedAppointment && (
        <div className="modal-overlay">
          <div className="payment-modal">
            <h3>Thanh to√°n</h3>
            <p>
              Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n cho l·ªãch h·∫πn #
              {payFull
                ? "Thanh to√°n t·∫•t c·∫£ c√°c l·ªãch h·∫πn ch∆∞a thanh to√°n trong l·ªãch ti√™m n√†y"
                : `Thanh to√°n l·ªãch h·∫πn #${selectedAppointment.appId}`}
            </p>

            <div className="payment-options">
              <div className="payment-option">
                <input
                  type="radio"
                  id="vnpay"
                  name="paymentMethod"
                  checked={!manualPayment}
                  onChange={() => setManualPayment(false)}
                />
                <label htmlFor="vnpay">Thanh to√°n qua VNPay</label>
              </div>

              <div className="payment-option">
                <input
                  type="radio"
                  id="manual"
                  name="paymentMethod"
                  checked={manualPayment}
                  onChange={() => setManualPayment(true)}
                />
                <label htmlFor="manual">ƒê√°nh d·∫•u ƒë√£ thanh to√°n th·ªß c√¥ng</label>
              </div>
            </div>

            <div className="modal-actions">
              <button
                className="confirm-btn"
                onClick={processPayment}
                disabled={processingPayment}
              >
                {processingPayment ? "ƒêang x·ª≠ l√Ω..." : "Ti·∫øp t·ª•c"}
              </button>
              <button
                className="cancel-btn"
                onClick={() => setShowPaymentModal(false)}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal Record */}
      {showRecordModal && selectedAppointment && (
        <div className="modal-overlay">
          <div className="record-modal">
            <h3>
              {isViewOnly
                ? "Xem h·ªì s∆° y t·∫ø"
                : recordData.id
                ? "Ch·ªânh s·ª≠a h·ªì s∆° y t·∫ø"
                : "T·∫°o h·ªì s∆° y t·∫ø"}
            </h3>
            <div className="modal-info">
              <div className="info-item">
                <span className="info-label">M√£ cu·ªôc h·∫πn:</span>
                <span className="info-value">{selectedAppointment.appId}</span>
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="symptoms">
                <FaStethoscope /> Tri·ªáu ch·ª©ng:
              </label>
              <textarea
                id="symptoms"
                value={recordData.symptoms}
                onChange={(e) =>
                  !isViewOnly &&
                  setRecordData({ ...recordData, symptoms: e.target.value })
                }
                placeholder="Nh·∫≠p tri·ªáu ch·ª©ng sau ti√™m..."
                disabled={isViewOnly}
                readOnly={isViewOnly}
                className={isViewOnly ? "readonly" : ""}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="notes">
                <FaNotesMedical /> Ghi ch√∫:
              </label>
              <textarea
                id="notes"
                value={recordData.notes}
                onChange={(e) =>
                  !isViewOnly &&
                  setRecordData({ ...recordData, notes: e.target.value })
                }
                placeholder="Nh·∫≠p ghi ch√∫ sau ti√™m..."
                disabled={isViewOnly}
                readOnly={isViewOnly}
                className={isViewOnly ? "readonly" : ""}
              />
            </div>

            <div className="modal-actions">
              {isViewOnly ? (
                <>
                  <button className="edit-btn" onClick={handleEditRecord}>
                    <FaEdit /> Ch·ªânh s·ª≠a
                  </button>
                  <button
                    className="cancel-btn"
                    onClick={handleCloseRecordModal}
                  >
                    ƒê√≥ng
                  </button>
                </>
              ) : (
                <>
                  <button
                    className="save-btn"
                    onClick={handleSaveRecord}
                    disabled={isSaving}
                  >
                    {isSaving ? (
                      "ƒêang l∆∞u..."
                    ) : (
                      <>
                        <FaSave /> L∆∞u
                      </>
                    )}
                  </button>
                  <button
                    className="cancel-btn"
                    onClick={handleCloseRecordModal}
                  >
                    H·ªßy
                  </button>
                </>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Modal d·ªùi l·ªãch */}
      {showRescheduleModal && appointmentToReschedule && (
        <div className="modal-overlay">
          <div className="reschedule-modal">
            <h3>D·ªùi l·ªãch h·∫πn</h3>
            <div className="modal-content">
              <div className="appointment-info">
                <p>
                  <strong>M√£ cu·ªôc h·∫πn:</strong> {appointmentToReschedule.appId}
                </p>
                <p>
                  <strong>Tr·∫ª:</strong> {schedule?.childName}
                </p>
                <p>
                  <strong>Ng√†y h·∫πn hi·ªán t·∫°i:</strong>{" "}
                  {formatDate(appointmentToReschedule.appointmentDate)}
                </p>
                <p>
                  <strong>Th·ªùi gian hi·ªán t·∫°i:</strong>{" "}
                  {formatTime(appointmentToReschedule.appointmentTime)}
                </p>
              </div>
              <div className="reschedule-section">
                <div className="form-group">
                  <label htmlFor="newDate">Ch·ªçn ng√†y m·ªõi:</label>
                  {/* T√≠nh to√°n range v√† √°p d·ª•ng v√†o input */}
                  <input
                    type="date"
                    id="newDate"
                    value={newAppointmentDate}
                    onChange={(e) => setNewAppointmentDate(e.target.value)}
                    min={
                      calculateDateRange(
                        appointmentToReschedule.appointmentDate
                      ).min
                    }
                    max={
                      calculateDateRange(
                        appointmentToReschedule.appointmentDate
                      ).max
                    }
                    required
                  />
                  <small className="date-range-info">
                    (B·∫°n ch·ªâ c√≥ th·ªÉ ch·ªçn trong ph·∫°m vi 3 ng√†y tr∆∞·ªõc v√† sau ng√†y
                    h·∫πn ban ƒë·∫ßu)
                  </small>
                </div>
                <div className="form-group">
                  <label htmlFor="newTime">Ch·ªçn th·ªùi gian m·ªõi:</label>
                  <select
                    id="newTime"
                    value={newAppointmentTime}
                    onChange={(e) => setNewAppointmentTime(e.target.value)}
                    required
                  >
                    <option value="">-- Ch·ªçn th·ªùi gian --</option>
                    {generateTimeSlots().map((timeSlot) => (
                      <option key={timeSlot} value={timeSlot}>
                        {timeSlot.substring(0, 5)}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
            <div className="modal-actions">
              <button
                className="cancel-btn"
                onClick={handleCloseRescheduleModal}
                disabled={reschedulingAppointment}
              >
                H·ªßy B·ªè
              </button>
              <button
                className="confirm-btn"
                onClick={handleRescheduleAppointment}
                disabled={
                  reschedulingAppointment ||
                  !newAppointmentDate ||
                  !newAppointmentTime
                }
              >
                {reschedulingAppointment
                  ? "ƒêang x·ª≠ l√Ω..."
                  : "X√°c nh·∫≠n ƒë·ªïi l·ªãch"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ScheduleDetail;
