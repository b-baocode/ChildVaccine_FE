import React, { useEffect, useState } from "react";
import appointmentService from "../../service/appointmentService"; // ƒêi·ªÅu ch·ªânh ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn
import "../../styles/StaffStyles/Appointments.css";
import recordService from "../../service/recordService";
import paymentService from "../../service/paymentService"; // Import paymentService
import sessionService from "../../service/sessionService";

const StaffAppointment = () => {
  const [appointments, setAppointments] = useState([]);
  const [selectedAppointmentId, setSelectedAppointmentId] = useState(null);
  const [symptoms, setSymptoms] = useState("");
  const [notes, setNotes] = useState("");
  const [status, setStatus] = useState("CONFIRMED");
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const [showWarningModal, setShowWarningModal] = useState(false); // Th√™m state cho warningModal
  const [warningMessage, setWarningMessage] = useState(""); // L∆∞u th√¥ng b√°o l·ªói
  const [pendingStatusChange, setPendingStatusChange] = useState(null);
  const [showUpdateModal, setShowUpdateModal] = useState(false);
  const [processingPayment, setProcessingPayment] = useState(false);
  const [processingPaymentId, setProcessingPaymentId] = useState(null);
  const [records, setRecords] = useState([]);
  const [isViewOnly, setIsViewOnly] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [error, setError] = useState("");
  const [refreshTrigger, setRefreshTrigger] = useState(0);

  useEffect(() => {
    const fetchAppointments = async () => {
      try {
        const appointmentsData = await appointmentService.getAllAppointments();
        setAppointments(appointmentsData);
      } catch (error) {
        console.error("Error fetching appointments:", error);
      }
    };

    fetchAppointments();
  }, []);

  useEffect(() => {
    const handleEscKey = (event) => {
      if (event.key === "Escape" && showUpdateModal) {
        handleCloseModal();
      }
    };
    document.addEventListener("keydown", handleEscKey);
    return () => document.removeEventListener("keydown", handleEscKey);
  }, [showUpdateModal]);

  useEffect(() => {
    const fetchRecords = async () => {
      try {
        const recordsData = await recordService.getAllRecords();
        setRecords(recordsData);
      } catch (error) {
        console.error("Error fetching records:", error);
      }
    };

    fetchRecords();
  }, [refreshTrigger]);

  const hasRecord = (appointmentId) => {
    // Ki·ªÉm tra xem appointment n√†y c√≥ record ch∆∞a
    const existingRecord = records.some(
      (record) => record.appointmentId === appointmentId
    );

    // N·∫øu ƒëang xem record c·ªßa appointment n√†y (isViewOnly=true v√† selectedAppointmentId=appointmentId)
    // th√¨ nghƒ©a l√† appointment n√†y c√≥ record
    const isCurrentlyViewingThisRecord =
      isViewOnly && selectedAppointmentId === appointmentId;

    return existingRecord || isCurrentlyViewingThisRecord;
  };

  const getRecordForAppointment = (appointmentId) => {
    return (
      records.find((record) => record.appointmentId === appointmentId) || {}
    );
  };

  const handleOverlayClick = (event) => {
    if (event.target.className === "update-modal-overlay") {
      handleCloseModal();
    }
  };

  const handleUpdateClick = (appointment) => {
    setSelectedAppointmentId(appointment.appId);

    const record = getRecordForAppointment(appointment.appId);

    if (record.id) {
      // Record exists - set values from record and mark as view-only
      setSymptoms(record.symptoms || "");
      setNotes(record.notes || "");
      setIsViewOnly(true); // New state variable
    } else {
      // No record - allow creation
      setSymptoms("");
      setNotes("");
      setIsViewOnly(false);
    }

    setStatus(appointment.status);
    setShowUpdateModal(true);
  };

  const handleSaveClick = async (appointmentId) => {
    try {
      setIsSaving(true);

      // T·∫°o ƒë·ªëi t∆∞·ª£ng record m·ªõi
      const recordData = {
        appointmentId: appointmentId,
        staffId: "S001",
        symptoms: symptoms,
        notes: notes,
        appointmentDate: new Date().toISOString().split("T")[0],
      };

      // G·ªçi API ƒë·ªÉ l∆∞u record
      const savedRecord = await recordService.createRecord(recordData);

      if (savedRecord && savedRecord.id) {
        // C·∫≠p nh·∫≠t state records
        const newRecords = [...records, savedRecord];
        setRecords(newRecords);

        // C·∫≠p nh·∫≠t state appointments
        setAppointments((prevAppointments) =>
          prevAppointments.map((appointment) =>
            appointment.appId === appointmentId
              ? { ...appointment, notes: notes }
              : appointment
          )
        );

        // QUAN TR·ªåNG: Th√™m m·ªôt ch√∫t tr·ªÖ tr∆∞·ªõc khi ƒë√≥ng modal
        // ƒê·ªÉ ƒë·∫£m b·∫£o state ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr∆∞·ªõc khi re-render
        setTimeout(() => {
          // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
          setShowSuccessMessage(true);

          // ƒê√≥ng modal
          setShowUpdateModal(false);

          // ·∫®n th√¥ng b√°o sau m·ªôt kho·∫£ng th·ªùi gian
          setTimeout(() => setShowSuccessMessage(false), 3000);
        }, 100); // ƒê·ª£i 100ms ƒë·ªÉ ƒë·∫£m b·∫£o state ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t

        if (savedRecord && savedRecord.id) {
          setRecords((prevRecords) => [...prevRecords, savedRecord]);
          setRefreshTrigger((prev) => prev + 1);
        }
      } else {
        setError("L∆∞u record kh√¥ng th√†nh c√¥ng. D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá.");
      }
    } catch (error) {
      console.error("Error saving record:", error);
      setError(error.message || "Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } finally {
      setIsSaving(false);
    }
  };

  const handleStatusChange = (appointmentId, newStatus) => {
    const currentAppointment = appointments.find(
      (appt) => appt.appId === appointmentId
    );
    const currentStatus = currentAppointment.status;

    // Ki·ªÉm tra logic tr∆∞·ªõc khi hi·ªÉn th·ªã modal
    if (currentStatus === "CANCELLED" && newStatus !== "CANCELLED") {
      setWarningMessage(
        "Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i t·ª´ CANCELLED sang tr·∫°ng th√°i kh√°c."
      );
      setShowWarningModal(true);
    } else if (currentStatus === "COMPLETED" && newStatus === "CONFIRMED") {
      setWarningMessage(
        "Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i t·ª´ COMPLETED v·ªÅ CONFIRMED."
      );
      setShowWarningModal(true);
    } else {
      setPendingStatusChange({ appointmentId, newStatus });
      setShowConfirmModal(true);
    }
  };

  const confirmStatusChange = async () => {
    if (!pendingStatusChange) return;

    const { appointmentId, newStatus } = pendingStatusChange;

    try {
      const updatedAppointment =
        await appointmentService.updateAppointmentStatus(
          appointmentId,
          newStatus.toUpperCase()
        );

      setAppointments((prevAppointments) =>
        prevAppointments.map((appointment) =>
          appointment.appId === appointmentId ? updatedAppointment : appointment
        )
      );

      setShowConfirmModal(false);
      setPendingStatusChange(null);

      // Hi·ªÉn th·ªã th√¥ng b√°o c·∫≠p nh·∫≠t th√†nh c√¥ng
      alert(`Tr·∫°ng th√°i ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh ${newStatus.toUpperCase()}!`);

      // N·∫øu status l√† COMPLETED, c√≥ th·ªÉ ph√°t s·ª± ki·ªán qua WebSocket (n·∫øu c·∫ßn)
      if (newStatus.toUpperCase() === "COMPLETED") {
        console.log(
          "üîî Appointment completed, feedback required:",
          appointmentId
        );
        // G·ª≠i event socket ·ªü ƒë√¢y n·∫øu h·ªá th·ªëng h·ªó tr·ª£
      }
    } catch (error) {
      console.error("Error updating appointment status:", error);
      alert(
        error.message ||
          "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i. Vui l√≤ng th·ª≠ l·∫°i!"
      );
    }
  };

  const handleCloseModal = () => {
    setShowUpdateModal(false);
    setSelectedAppointmentId(null);
    setSymptoms("");
    setNotes("");
    setStatus("CONFIRMED");
    setIsViewOnly(false);
  };

  const handleCloseWarningModal = () => {
    setShowWarningModal(false);
    setWarningMessage("");
  };

  const getServiceId = (appointment) => {
    if (appointment.vaccineId && typeof appointment.vaccineId === "object") {
      return appointment.vaccineId.vaccineId;
    }
    if (appointment.packageId && typeof appointment.packageId === "object") {
      return appointment.packageId.packageId;
    }
    return "N/A";
  };
  // Add this function after the other handler functions
  const handlePayment = async (appointment) => {
    try {
      setProcessingPayment(true);
      setProcessingPaymentId(appointment.appId);

      // Import paymentService at the top of the file
      // import paymentService from '../../service/paymentService';
      sessionStorage.setItem("currentPaymentAppId", appointment.appId);

      // Get payment URL from API
      const paymentUrl = await paymentService.createPayment(appointment.appId);

      // Open VNPay payment page in a new tab
      const newTab = window.open(paymentUrl, "_blank");

      // Check if popup was blocked
      if (!newTab || newTab.closed || typeof newTab.closed === "undefined") {
        alert(
          "Tr√¨nh duy·ªát ƒë√£ ch·∫∑n c·ª≠a s·ªï thanh to√°n. Vui l√≤ng cho ph√©p popup v√† th·ª≠ l·∫°i."
        );
        setProcessingPayment(false);
        setProcessingPaymentId(null);
        return;
      }

      // Thi·∫øt l·∫≠p m·ªôt interval ƒë·ªÉ ki·ªÉm tra xem c·ª≠a s·ªï thanh to√°n ƒë√£ ƒë√≥ng ch∆∞a
      const checkPaymentCompletionInterval = setInterval(() => {
        if (newTab.closed) {
          clearInterval(checkPaymentCompletionInterval);

          // Ki·ªÉm tra k·∫øt qu·∫£ thanh to√°n th√¥ng qua API
          checkPaymentStatus(appointment.appId);

          // Reset processing state
          setProcessingPayment(false);
          setProcessingPaymentId(null);
        }
      }, 1000);
    } catch (error) {
      console.error("Error initiating payment:", error);
      alert("Kh√¥ng th·ªÉ kh·ªüi t·∫°o thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i sau.");
      setProcessingPayment(false);
      setProcessingPaymentId(null);
    }
  };

  // H√†m m·ªõi ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
  const checkPaymentStatus = async (appointmentId) => {
    try {
      // L·∫•y th√¥ng tin appointment m·ªõi nh·∫•t ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
      const updatedAppointment = await appointmentService.getAppointmentById(
        appointmentId
      );

      // N·∫øu tr·∫°ng th√°i thanh to√°n ƒë√£ chuy·ªÉn th√†nh PAID, reload trang
      if (updatedAppointment && updatedAppointment.paymentStatus === "PAID") {
        console.log("Thanh to√°n th√†nh c√¥ng, ƒëang l√†m m·ªõi trang...");

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        setShowSuccessMessage(true);
        setTimeout(() => {
          window.location.reload(); // Reload trang
        }, 1500); // ƒê·ª£i 1.5 gi√¢y ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y th√¥ng b√°o
      } else {
        // N·∫øu ch∆∞a th√†nh c√¥ng, hi·ªÉn th·ªã th√¥ng b√°o t∆∞∆°ng ·ª©ng
        console.log(
          "Tr·∫°ng th√°i thanh to√°n ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho·∫∑c kh√¥ng th√†nh c√¥ng"
        );

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch appointments ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i m·ªõi nh·∫•t
        setAppointments((prevAppointments) =>
          prevAppointments.map((app) =>
            app.appId === appointmentId ? updatedAppointment : app
          )
        );
      }
    } catch (error) {
      console.error("Error checking payment status:", error);
    }
  };

  return (
    <div className="appointment-page">
      <h1>Appointments</h1>
      {showSuccessMessage && (
        <div className="success-message">C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!</div>
      )}
      {error && <div className="error-message">{error}</div>}
      <table className="appointment-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Customer ID</th>
            <th>Child ID</th>
            <th>Service ID</th>
            <th>Appointment Date</th>
            <th>Appointment Time</th>
            <th>Status</th>
            <th>Payment Status</th>
            <th>Notes</th>
            <th colSpan="2">Actions</th>
          </tr>
        </thead>
        <tbody>
          {appointments
            .sort((a, b) => {
              const numA = parseInt(a.appId.substring(3), 10) || 0;
              const numB = parseInt(b.appId.substring(3), 10) || 0;
              return numB - numA;
            })
            .map((appointment) => {
              const appointmentRecord = getRecordForAppointment(
                appointment.appId
              );
              const hasExistingRecord = hasRecord(appointment.appId);

              return (
                <tr key={appointment.appId}>
                  <td>{appointment.appId}</td>
                  <td>{appointment.customer?.cusId || "N/A"}</td>
                  <td>{appointment.child?.childId || "N/A"}</td>
                  <td>
                    {appointment.vaccineId?.name ||
                      appointment.packageId?.name ||
                      "N/A"}
                  </td>
                  <td>
                    {new Date(appointment.appointmentDate).toLocaleDateString()}
                  </td>
                  <td>{appointment.appointmentTime}</td>
                  <td>
                    <select
                      value={appointment.status}
                      onChange={(e) =>
                        handleStatusChange(appointment.appId, e.target.value)
                      }
                      className={`status-select ${appointment.status.toLowerCase()}`}
                    >
                      <option value="CONFIRMED">CONFIRMED</option>
                      <option value="COMPLETED">COMPLETED</option>
                      <option value="CANCELLED">CANCELLED</option>
                    </select>
                  </td>
                  <td
                    className={`payment-status ${appointment.paymentStatus.toLowerCase()}`}
                  >
                    {appointment.paymentStatus}
                  </td>
                  <td>
                    {hasExistingRecord
                      ? appointmentRecord.notes
                      : appointment.notes || ""}
                  </td>

                  <td>
                    {hasExistingRecord ? (
                      // N·∫øu ƒë√£ c√≥ record, lu√¥n hi·ªÉn th·ªã n√∫t View
                      <button
                        className="view-btn"
                        onClick={() => handleUpdateClick(appointment)}
                      >
                        View
                      </button>
                    ) : appointment.status === "CANCELLED" ? (
                      // N·∫øu ƒë√£ h·ªßy v√† ch∆∞a c√≥ record, hi·ªÉn th·ªã n√∫t Update b·ªã v√¥ hi·ªáu h√≥a
                      <button
                        className="update-btn disabled"
                        disabled={true}
                        title="Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch h·∫πn ƒë√£ h·ªßy"
                      >
                        Update
                      </button>
                    ) : appointment.status === "COMPLETED" ? (
                      // N·∫øu ƒë√£ ho√†n th√†nh v√† ch∆∞a c√≥ record, hi·ªÉn th·ªã n√∫t Update b√¨nh th∆∞·ªùng
                      <button
                        className="update-btn"
                        onClick={() => handleUpdateClick(appointment)}
                      >
                        Update
                      </button>
                    ) : (
                      // Tr·∫°ng th√°i kh√°c (nh∆∞ CONFIRMED) - hi·ªÉn th·ªã n√∫t Update b·ªã v√¥ hi·ªáu h√≥a
                      <button
                        className="update-btn disabled"
                        disabled={true}
                        title="Ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t sau khi ho√†n th√†nh"
                      >
                        Update
                      </button>
                    )}
                  </td>

                  <td>
                    {appointment.status === "COMPLETED" &&
                      appointment.paymentStatus !== "PAID" && (
                        <button
                          className="payment-btn"
                          onClick={() => handlePayment(appointment)}
                          disabled={
                            processingPayment &&
                            processingPaymentId === appointment.appId
                          }
                        >
                          {processingPayment &&
                          processingPaymentId === appointment.appId
                            ? "ƒêang x·ª≠ l√Ω..."
                            : "Thanh to√°n"}
                        </button>
                      )}
                  </td>
                </tr>
              );
            })}
        </tbody>
      </table>

      {/* Confirmation Modal */}
      {showConfirmModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h2>X√°c nh·∫≠n thay ƒë·ªïi</h2>
            <p>
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thay ƒë·ªïi tr·∫°ng th√°i th√†nh{" "}
              {pendingStatusChange?.newStatus}?
            </p>
            <div className="modal-buttons">
              <button className="confirm-button" onClick={confirmStatusChange}>
                X√°c nh·∫≠n
              </button>
              <button
                className="cancel-button"
                onClick={() => setShowConfirmModal(false)}
              >
                H·ªßy
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Warning Modal */}
      {showWarningModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h2>C·∫£nh b√°o</h2>
            <p>{warningMessage}</p>
            <div className="modal-buttons">
              <button
                className="cancel-button"
                onClick={handleCloseWarningModal}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Update Modal */}
      {/* Update Modal */}
      {showUpdateModal && (
        <div className="update-modal-overlay" onClick={handleOverlayClick}>
          <div className="update-modal">
            <div className="update-modal-header">
              <h2 className="update-modal-title">
                {isViewOnly ? "Xem th√¥ng tin" : "C·∫≠p nh·∫≠t th√¥ng tin"}
              </h2>
              <button className="close-button" onClick={handleCloseModal}>
                √ó
              </button>
            </div>
            <div className="modal-info">
              <div className="info-item">
                <span className="info-label">ID l·ªãch ti√™m:</span>
                <span className="info-value">{selectedAppointmentId}</span>
              </div>
              <div className="info-item">
                <span className="info-label">Staff ID:</span>
                <span className="info-value">
                  {isViewOnly
                    ? getRecordForAppointment(selectedAppointmentId)
                        .staffName || "N/A"
                    : "ST001"}
                </span>
              </div>
              {isViewOnly && (
                <div className="info-item">
                  <span className="info-label">Ng√†y ghi nh·∫≠n:</span>
                  <span className="info-value">
                    {getRecordForAppointment(selectedAppointmentId)
                      .appointmentDate || "N/A"}
                  </span>
                </div>
              )}
            </div>

            <div className="update-form">
              <div className="form-group">
                <label>Tri·ªáu ch·ª©ng</label>
                <textarea
                  value={symptoms}
                  onChange={(e) => !isViewOnly && setSymptoms(e.target.value)}
                  placeholder="Nh·∫≠p tri·ªáu ch·ª©ng"
                  readOnly={isViewOnly}
                  className={isViewOnly ? "readonly" : ""}
                />
              </div>
              <div className="form-group">
                <label>Ghi ch√∫</label>
                <textarea
                  value={notes}
                  onChange={(e) => !isViewOnly && setNotes(e.target.value)}
                  placeholder="Nh·∫≠p ghi ch√∫"
                  readOnly={isViewOnly}
                  className={isViewOnly ? "readonly" : ""}
                />
              </div>
            </div>

            <div className="modal-footer">
              {!isViewOnly ? (
                <>
                  <button
                    className="save-button"
                    onClick={() => handleSaveClick(selectedAppointmentId)}
                  >
                    L∆∞u
                  </button>
                  <button className="cancel-button" onClick={handleCloseModal}>
                    H·ªßy b·ªè
                  </button>
                </>
              ) : (
                <button
                  className="close-button-full"
                  onClick={handleCloseModal}
                >
                  ƒê√≥ng
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default StaffAppointment;
